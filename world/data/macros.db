{"_id":"0YpNCZA61hR0HELE","name":"Pause","type":"script","author":"B9gnYBRjYSZZpO02","img":"icons/svg/door-closed-outline.svg","scope":"global","command":"const pauseFunction = 'pause'; //can be pause, resume or toggle\n\nif (pauseFunction == 'pause' && game.paused == false) game.togglePause();\nelse if (pauseFunction == 'resume' && game.paused) game.togglePause();\nelse if (pauseFunction == 'toggle') game.togglePause();","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":true}},"ownership":{"default":0,"B9gnYBRjYSZZpO02":3},"_stats":{"systemId":null,"systemVersion":null,"coreVersion":null,"createdTime":null,"modifiedTime":null,"lastModifiedBy":null}}
{"_id":"1Nu960ejlISgdNsE","name":"Yvas Colour Swap","type":"script","author":"B9gnYBRjYSZZpO02","img":"https://assets.forge-vtt.com/5fb68331ec470b7aaf634c04/resources/Castanem/tokens/players/yvas_cold_icon.png","scope":"global","command":"// NOTE: This is made for FVTT version 0.8.9 and likely will break on any upgrades to v9/v10\n// Talk to Ash is there's problems with it.\n\n// Token Image URL's\nconst coldUrl = `https://assets.forge-vtt.com/5fb68331ec470b7aaf634c04/resources/Castanem/tokens/players/yvas_cold_icon.png`;\nconst fireUrl = `https://assets.forge-vtt.com/5fb68331ec470b7aaf634c04/resources/Castanem/tokens/players/yvas_fire_icon.png`;\nconst lightningUrl =`https://assets.forge-vtt.com/5fb68331ec470b7aaf634c04/resources/Castanem/tokens/players/yvas_lightning_icon.png`;\nconst acidUrl = `https://assets.forge-vtt.com/5fb68331ec470b7aaf634c04/resources/Castanem/tokens/players/yvas_acid_icon.png`;\nconst poisonUrl =`https://assets.forge-vtt.com/5fb68331ec470b7aaf634c04/resources/Castanem/tokens/players/yvas_poison_icon.png`;\n\n// Token Icon URL's\nconst coldTokenUrl = `https://assets.forge-vtt.com/5fb68331ec470b7aaf634c04/resources/Castanem/tokens/players/yvas_cold_token.png`;\nconst fireTokenUrl = `https://assets.forge-vtt.com/5fb68331ec470b7aaf634c04/resources/Castanem/tokens/players/yvas_fire_token.png`;\nconst lightningTokenUrl =`https://assets.forge-vtt.com/5fb68331ec470b7aaf634c04/resources/Castanem/tokens/players/yvas_lightning_token.png`;\nconst acidTokenUrl = `https://assets.forge-vtt.com/5fb68331ec470b7aaf634c04/resources/Castanem/tokens/players/yvas_acid_token.png`;\nconst poisonTokenUrl =`https://assets.forge-vtt.com/5fb68331ec470b7aaf634c04/resources/Castanem/tokens/players/yvas_poison_token.png`;\n\n\n// Active Effect ID's\nconst coldEffectId = `XlSwFywAbYlzYyNq`;\nconst fireEffectId =`AiIClwGDuNBDwQ8W`;\nconst lightningEffectId = `KmxQgUzJWPWUvqkA`;\nconst acidEffectId = `yRfFGHq6RNEmZZjN`;\nconst poisonEffectId = `txqP5KlEkE6VyO9X`;\n\n// Get actor\nlet act = game.actors.getName(\"Yvas\");\n\n// Configure the dialog window\nlet dialogEditor = new Dialog({\n    title: `Rainbow Dragon Palette Swapper`,\n    content: `Choose which damage type to change Yvas to.`,\n    buttons: {\n        cold: {\n            label: `Cold <br/> (White/Silver)`,\n            icon: '<i class=\"fas fa-snowflake\"></i>',\n            callback: async () => {\n                // Update actor sheet image and prototype token image\n                await act.update({\"img\": coldUrl, \"token.img\": coldTokenUrl});\n                // Toggle effects\n                await act.updateEmbeddedDocuments(\"ActiveEffect\", [\n                  {_id: coldEffectId, disabled: false},\n                  {_id: fireEffectId, disabled: true},\n                  {_id: lightningEffectId, disabled: true},\n                  {_id: acidEffectId, disabled: true},\n                  {_id: poisonEffectId, disabled: true}\n                ]);\n                // Update tokens\n                await updateAllTokens(coldTokenUrl);\n                // Chat notification\n                sendToChat(`Yvas has become frigid as ice.`);\n            }\n        },\n        fire: {\n            label: `Fire <br/> (Red/Gold/Brass)`,\n            icon: '<i class=\"fas fa-fire\"></i>',\n            callback: async () => {\n                // Update actor sheet image and prototype token image\n                await act.update({\"img\": fireUrl, \"token.img\": fireTokenUrl});\n                // Toggle effects\n                await act.updateEmbeddedDocuments(\"ActiveEffect\", [\n                  {_id: coldEffectId, disabled: true},\n                  {_id: fireEffectId, disabled: false},\n                  {_id: lightningEffectId, disabled: true},\n                  {_id: acidEffectId, disabled: true},\n                  {_id: poisonEffectId, disabled: true}\n                ]);\n                // Update tokens\n                await updateAllTokens(fireTokenUrl);\n                // Chat notification\n                sendToChat(`Yvas has become hot as lava.`);\n            }\n        },\n        lightning: {\n            label: `Lightning <br/> (Blue/Bronze)`,\n            icon: '<i class=\"fas fa-bolt\"></i>',\n            callback: async () => {\n                // Update actor sheet image and prototype token image\n                await act.update({\"img\": lightningUrl, \"token.img\": lightningTokenUrl});\n                // Toggle effects\n                await act.updateEmbeddedDocuments(\"ActiveEffect\", [\n                  {_id: coldEffectId, disabled: true},\n                  {_id: fireEffectId, disabled: true},\n                  {_id: lightningEffectId, disabled: false},\n                  {_id: acidEffectId, disabled: true},\n                  {_id: poisonEffectId, disabled: true}\n                ]);\n                // Update tokens\n                await updateAllTokens(lightningTokenUrl);\n                // Chat notification\n                sendToChat(`Yvas crackles with electricity.`);\n            }\n        },\n        acid: {\n            label: `Acid <br/> (Black/Copper)`,\n            icon: '<i class=\"fas fa-vial\"></i>',\n            callback: async () => {\n                // Update actor sheet image and prototype token image\n                await act.update({\"img\": acidUrl, \"token.img\": acidTokenUrl});\n                // Toggle effects\n                await act.updateEmbeddedDocuments(\"ActiveEffect\", [\n                  {_id: coldEffectId, disabled: true},\n                  {_id: fireEffectId, disabled: true},\n                  {_id: lightningEffectId, disabled: true},\n                  {_id: acidEffectId, disabled: false},\n                  {_id: poisonEffectId, disabled: true}\n                ]);\n                // Update tokens\n                await updateAllTokens(acidTokenUrl);\n                // Chat notification\n                sendToChat(`Yvas dribbles acid from her maw.`);\n            }\n        },\n        poison: {\n            label: `Poison <br/> (Green)`,\n            icon: '<i class=\"fas fa-skull-crossbones\"></i>',\n            callback: async () => {\n                // Update actor sheet image and prototype token image\n                await act.update({\"img\": poisonUrl, \"token.img\": poisonTokenUrl});\n                // Toggle effects\n                await act.updateEmbeddedDocuments(\"ActiveEffect\", [\n                  {_id: coldEffectId, disabled: true},\n                  {_id: fireEffectId, disabled: true},\n                  {_id: lightningEffectId, disabled: true},\n                  {_id: acidEffectId, disabled: true},\n                  {_id: poisonEffectId, disabled: false}\n                ]);\n                // Update tokens\n                await updateAllTokens(poisonTokenUrl);\n                // Chat notification\n                sendToChat(`Yvas leaks toxic fumes.`);\n            }\n        }\n    },\n    default: \"close\",\n    close: () => {}\n}, {width: 700});\n\n// Render the dialog window\ndialogEditor.render(true);\n\n// Loops through all scenes and updates the image on all tokens on each one\nasync function updateAllTokens(newImgUrl){\n  for(let scene of game.scenes) {\n    const tokens = scene.tokens.filter(t => t.name === \"Yvas\");\n    const updates = tokens.map(t => ({_id: t.id, img: newImgUrl}));\n    await scene.updateEmbeddedDocuments(\"Token\", updates);\n  }\n}\n\n// Sends a notification to chat if the user running the macro isn't a GM\nfunction sendToChat(msg) {\n    if (!game.user.isGM) {\n        ChatMessage.create({speaker: {alias: `Yvas Colour Swap`}, content : msg});\n    }\n    ui.notifications.notify(msg);\n}","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false}},"ownership":{"default":0,"B9gnYBRjYSZZpO02":3,"HETKO3yU7ZGsMIw8":3,"X2bPAvcWxrrlGGbv":2},"_stats":{"systemId":null,"systemVersion":null,"coreVersion":null,"createdTime":null,"modifiedTime":null,"lastModifiedBy":null}}
{"_id":"4swfnFHy3EIY05nZ","name":"Check Passive Perception","type":"script","author":"B9gnYBRjYSZZpO02","img":"icons/svg/eye.svg","scope":"global","command":"// Pull the passive perception of each token in the current scene and whisper the results to the GM.\n// Only tested with the 5e System in Foundry.\n// Author: @Drunemeton#7955. Based on the original macro by author @Erogroth#7134.\n\n// Initalize variables.\nlet pcArray = [];\nlet npcArray = [];\nlet messageContentPC = \"\";\nlet messageContentNPC = \"\";\nlet messageHeaderPC = \"<b>PC Passive Perception</b><br>\";\nlet messageHeaderNPC = \"<b>NPC Passive Perception</b><br>\";\n\n// Gather tokens in the current scene into an array.\nlet tokens = canvas.tokens.placeables.filter((token) => token.data && token.actor);\n\n// From the tokens array sort into PC and NPC arrays.\nfor (let count of tokens) {\n  let tokenType = count.actor.data.type;\n  let tokenName = count.data.name;\n  let tokenPassive = count.actor.data.data.skills.prc.passive;\n  \n  if(tokenType === \"character\") {\n    pcArray.push({ name: tokenName, passive: tokenPassive });\n  } \n  if(tokenType === \"npc\") {\n    npcArray.push({ name: tokenName, passive: tokenPassive });\n  }\n}\n\n// Sort each array.\nsortArray(pcArray);\nsortArray(npcArray);\n\n// Build chat message, with PCs first, then NPCs.\nfor (let numPC of pcArray) {\n  messageContentPC += `${numPC.name}: <b>${numPC.passive}</b><br>`;\n}\nfor (let numNPC of npcArray) {\n  messageContentNPC += `${numNPC.name}: <b>${numNPC.passive}</b><br>`;\n}\n\nlet chatMessage = (messageHeaderPC + messageContentPC + `<br>` + messageHeaderNPC + messageContentNPC);\n\nlet chatData = {\n  user: game.user._id,\n  speaker: ChatMessage.getSpeaker(),\n  content: chatMessage,\n  whisper: game.users.filter((u) => u.isGM).map((u) => u._id),\n};\n\n// Display chat message.\nChatMessage.create(chatData, {});\n\n// Sort each array by Name.\n  function sortArray(checkArray) {\n    checkArray.sort(function (a, b) {\n      var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n      var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n      // names must be equal\n      return 0;\n    });\n\n    // Sort array by Passive Perception.\n    checkArray.sort(function (a, b) {\n      return b.passive - a.passive;\n    });\n  }","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":true}},"ownership":{"default":0,"B9gnYBRjYSZZpO02":3},"_stats":{"systemId":null,"systemVersion":null,"coreVersion":null,"createdTime":null,"modifiedTime":null,"lastModifiedBy":null}}
{"_id":"6hvfhtsNYKUKCM5T","name":"Damage Report!","type":"script","author":"HETKO3yU7ZGsMIw8","img":"icons/magic/life/cross-worn-green.webp","scope":"global","command":"// Handle Data Setup\nlet healingMacro = this;\n\nlet amaraId = \"UxnRUlxPF2y40q3K\";\nlet kitId = \"OsYDaneGkF0I4QHF\";\n\nlet friends = [\n  { name: \"Amara Drakos\", shortName: \"Amara\" },\n  { name: \"Yekaterina Volkov\", shortName: \"Katya\" },\n  { name: \"Kultu Tragen\", shortName: \"Kultu\" },\n  { name: \"Lucius\", shortName: \"Lucky\" },\n  { name: \"Renée\", shortName: \"Renée\" },\n  { name: \"Xed'aoth Mhalk\", shortName: \"Xed\" },\n  { name: \"Yvas\", shortName: \"Yvas\" },\n  { name: \"Zykrov\", shortName: \"Zykrov\" },\n];\n\nlet flag = healingMacro.getFlag('world','hasBeenHealed');\nif(!flag){\n  resetFlags(healingMacro);\n  flag = [];\n}\n\n// Generate Dialog Table\nlet html = `\n<table>\n  <tr style=\"text-align:left\">\n    <th style=\"width:42px; text-align:center;\"><i class='fas fa-check'></i></th>\n    <th>Name</th>\n    <th>Status</th>\n    <th>Kit</th>\n    <th>Potions</th>\n    <th>RO</th></tr>\n`;\n\nfor(var i = 0; i < friends.length; i++){\n  let name = friends[i].name;\n  let shortName = friends[i].shortName;\n\n  let act = game.actors.getName(name);\n  let id = act.id;\n\n  let kitUses = getKitUses(act);\n  let numPotionsStd = parseInt(act.items.getName(\"Potion of Healing\")?.system.quantity) || 0;\n  let numPotionsGrt = parseInt(act.items.getName(\"Potion of Greater Healing\")?.system.quantity) || 0;\n  let numPotionsSup = parseInt(act.items.getName(\"Potion of Superior Healing\")?.system.quantity) || 0;\n  let numRestorativeOintment = parseInt(act.items.getName(\"Restorative Ointment\")?.system.uses.value) || 0;\n\n  let currentHp = act.system.attributes.hp.value;\n  let maxHp = act.system.attributes.hp.max;\n\n  let hasBeenHealed = flag.includes(id);\n\n  html += `\n    <tr>\n      <td><input type=\"checkbox\" id=\"${id}\" \"name=\"${shortName}-healed\", ${hasBeenHealed ? \"checked\" : \"\"}>\n      <td>${shortName}</td>\n      <td>${currentHp} / ${maxHp}</td>\n      <td>${kitUses}</td>\n      <td>${numPotionsStd} / ${numPotionsGrt} / ${numPotionsSup}</td>\n      <td>${numRestorativeOintment}</td>\n    </tr>\n  `;\n\n}\nhtml += `</table>`\n\n// Create Dialog\nnew Dialog({\n  title: `Damage Report!`,\n  content: html,\n  buttons: {\n     reset: {\n       icon: \"<i class='fas fa-undo'></i>\",\n       label: `Reset Flags`,\n       callback: (html) => resetFlags()\n    },\n    heal: {\n      icon: \"<i class='fas fa-heart'></i>\",\n      label: `Heal 'Em Up!`,\n      callback: (html) => heal(html, friends)\n    },\n  },\n  close: () => {}\n}).render(true);\n\n// Helper Methods\nfunction getKitUses(act){\n  let kit = act.items.getName(\"Healer's Kit\");\n  if(!kit){\n    kit = act.items.getName(\"Improved Healer's Kit\");\n  }\n  let kitUses = 0;\n  if(kit){\n    kitUses = kit.system.uses.value + ((kit.system.quantity-1) * kit.system.uses.max)\n  }\n  return kitUses;\n}\n\nasync function heal(html, friends){\n  let newFlag = [];\n  let toHeal = [];\n\n  for(var i = 0; i < friends.length; i++){\n    let name = friends[i].name;\n    let shortName = friends[i].shortName;\n    let act = game.actors.getName(name);\n    let id = act.id;\n\n    let isChecked = html.find(\"input[id='\" + id + \"']\")[0].checked;\n    if(isChecked){\n      newFlag.push(id);\n    }\n\n    if(!flag.includes(id) && isChecked){\n      toHeal.push(shortName);\n    }\n  }\n\n  await healingMacro.setFlag('world','hasBeenHealed', newFlag);\n\n  if(toHeal.length > 0){\n    promptForHealing(toHeal);\n  }\n\n}\n\nasync function resetFlags(){\n  await healingMacro.setFlag('world','hasBeenHealed', []);\n}\n\nfunction promptForHealing(names){\n  let dialogContent = `Do you want to roll your Healer's Kit for: ${names.join(', ')}`;\n\n  new Dialog({\n    title: `Use Healer's Kit`,\n    content: dialogContent,\n    buttons: {\n       no: {\n         icon: \"<i class='fas fa-times'></i>\",\n         label: `Hell no!`,\n      },\n      yes: {\n        icon: \"<i class='fas fa-check'></i>\",\n        label: `Do it!`,\n        callback: async () => {\n          for(var i=0; i<names.length; i++){\n            await game.actors.get(amaraId).updateEmbeddedDocuments(\"Item\", [{_id:kitId, name:`Improved Healer's Kit (${names[i]})` }]);\n            await rsr5e.macro.rollItem(kitId, amaraId);\n          }\n          await game.actors.get(amaraId).updateEmbeddedDocuments(\"Item\", [{_id:kitId, name:`Improved Healer's Kit` }]);\n        }\n      },\n    },\n    close: () => {}\n  }).render(true);\n}","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""},"world":{"hasBeenHealed":["UxnRUlxPF2y40q3K","WB91YfwCmlu61DaY","LzpdpwrrWIvEjCbD","1FZZEUJQY8eduXVa","N4ZCFarrOoXnZ00d","dcs4KEG500UelLsh"]}},"ownership":{"default":0,"HETKO3yU7ZGsMIw8":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.2.1","coreVersion":"10.291","createdTime":null,"modifiedTime":1687054636311,"lastModifiedBy":"HETKO3yU7ZGsMIw8"}}
{"_id":"6wQYn0xGCef4Z3tp","name":"Bulk Skill Roller","type":"script","author":"HETKO3yU7ZGsMIw8","img":"icons/svg/d20.svg","scope":"global","command":"let rollDice = false;\n\nnew Dialog({\n  title: `Bulk Skill Roller`,\n  content: `\n    <div style='line-height: 25px; margin-bottom: 10px; display:flex;'>\n       <label for=\"skillType\" style=\"flex: 1;\">Choose a skill:</label><br>\n       <select name=\"skillType\" id=\"skillType\" style=\"flex: 2;\">\n          <option value=\"acr\">Acrobatics</option>\n          <option value=\"ani\">Animal Handling</option>\n          <option value=\"arc\">Arcana</option>\n          <option value=\"ath\">Athletics</option>\n          <option value=\"dec\">Deception</option>\n          <option value=\"his\">History</option>\n          <option value=\"ins\">Insight</option>\n          <option value=\"itm\">Intimidation</option>\n          <option value=\"inv\">Investigation</option>\n          <option value=\"med\">Medicine</option>\n          <option value=\"nat\">Nature</option>\n          <option value=\"prc\">Perception</option>\n          <option value=\"prf\">Performance</option>\n          <option value=\"per\">Persuasion</option>\n          <option value=\"rel\">Religion</option>\n          <option value=\"slt\">Sleight of Hand</option>\n          <option value=\"stl\">Stealth</option>\n          <option value=\"sur\">Survival</option>\n       </select>\n    </div>\n    <div style='line-height: 25px; margin-bottom: 10px; display:flex;'>\n       <label for=\"timesToRoll\" style=\"flex: 1;\">Times to Roll:</label><br>\n       <input type=\"number\" value=\"1\" id=\"timesToRoll\" name=\"timesToRoll\" style=\"flex: 2;\"/>  \n    </div>\n    <div style='line-height: 25px; margin-bottom: 10px; display:flex;'>\n       <label for=\"rollDc\" style=\"flex: 1;\">DC:</label><br>\n       <input type=\"number\" value=\"10\" id=\"rollDc\" name=\"rollDc\" style=\"flex: 2;\"/>  \n    </div>\n    <div style='line-height: 25px; margin-bottom: 10px; display:flex;'>\n       <input type=\"checkbox\" value=\"adv\" id=\"adv\" name=\"adv\"/> <label for=\"adv\">Advantage</label>   \n    </div>\n    <div style='line-height: 25px; margin-bottom: 10px; display:flex;'>\n       <input type=\"checkbox\" value=\"disadv\" id=\"disadv\" name=\"disadv\"/> <label for=\"disadv\">Disadvantage</label>  \n    </div>`,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Roll it!`,\n      callback: () => rollDice = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Nah.`,\n      callback: () => rollDice = false\n    },\n  },\n  default: \"yes\",\n  close: (html) => {\n    if (rollDice) {  \n      multiroll(html);\n    }\n  }\n}).render(true);\n\n// Cycles through effects, sees if they're checked, and activates/deactivates them accordingly\nasync function multiroll(html){\n   let times = parseInt(timesToRoll.value);\n   let skill = skillType.value;\n   let dc = parseInt(rollDc.value);\n   let adv = (html.find(\"input[id='adv']\")[0].checked) ? 1 : 0;\n   let disadv = (html.find(\"input[id='disadv']\")[0].checked) ? 1 : 0;\n   let successes = 0;\n\n   for(var i=0; i<times; i++){\n      //await character.rollSkill(skill, {vanilla: true,  fastForward: true, advantage: adv, disadvantage: disadv}); \n      let r = await character.rollSkill(skill, {vanilla: true,  fastForward: true, advantage: adv, disadvantage: disadv});\n      if(r._total >= dc) { successes +=1; }   \n   }\n   ChatMessage.create({\n            user : game.user._id,\n            speaker: {alias: `${character.name}'s Bulk Skill Roll`},\n            content: `Successes (DC ${dc}): ${successes} / ${times}`,\n   });  \n}","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""}},"ownership":{"default":2,"HETKO3yU7ZGsMIw8":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.1.4","coreVersion":"10.291","createdTime":null,"modifiedTime":1676220205291,"lastModifiedBy":"HETKO3yU7ZGsMIw8"}}
{"_id":"ATmhc64UxVmdHhiJ","name":"Yvas Colour Swap (Copy)","type":"script","author":"B9gnYBRjYSZZpO02","img":"https://assets.forge-vtt.com/5fb68331ec470b7aaf634c04/resources/Castanem/tokens/players/yvas_cold_icon.png","scope":"global","command":"let act = game.actors.getName(\"Yvas\");\n\nlet dialogEditor = new Dialog({\n    title: `Rainbow Dragon Palette Swapper`,\n    content: `Choose which damage type to change Yvas to.`,\n    buttons: {\n        cold: {\n            label: `Cold (White/Silver)`,\n            callback: () => {\n                act.update({\"img\": `https://assets.forge-vtt.com/5fb68331ec470b7aaf634c04/resources/Castanem/tokens/players/yvas_cold_icon.png`});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `XlSwFywAbYlzYyNq`, disabled:false});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `AiIClwGDuNBDwQ8W`, disabled:true});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `KmxQgUzJWPWUvqkA`, disabled:true});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `yRfFGHq6RNEmZZjN`, disabled:true});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `txqP5KlEkE6VyO9X`, disabled:true});\n                sendToChat(`Yvas has become frigid as ice.`);\n            }\n        },\n        fire: {\n            label: `Fire (Red/Gold/Brass)`,\n            callback: () => {\n                act.update({\"img\": `https://assets.forge-vtt.com/5fb68331ec470b7aaf634c04/resources/Castanem/tokens/players/yvas_fire_icon.png`});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `XlSwFywAbYlzYyNq`, disabled:true});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `AiIClwGDuNBDwQ8W`, disabled:false});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `KmxQgUzJWPWUvqkA`, disabled:true});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `yRfFGHq6RNEmZZjN`, disabled:true});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `txqP5KlEkE6VyO9X`, disabled:true});\n                sendToChat(`Yvas has become hot as lava.`);\n            }\n        },\n        lightning: {\n            label: `Lightning (Blue/Bronze)`,\n            callback: () => {\n                act.update({\"img\": `https://assets.forge-vtt.com/5fb68331ec470b7aaf634c04/resources/Castanem/tokens/players/yvas_lightning_icon.png`});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `XlSwFywAbYlzYyNq`, disabled:true});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `AiIClwGDuNBDwQ8W`, disabled:true});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `KmxQgUzJWPWUvqkA`, disabled:false});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `yRfFGHq6RNEmZZjN`, disabled:true});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `txqP5KlEkE6VyO9X`, disabled:true});\n                sendToChat(`Yvas crackles with electricity.`);\n            }\n        },\n        acid: {\n            label: `Acid (Black/Copper)`,\n            callback: () => {\n                act.update({\"img\": `https://assets.forge-vtt.com/5fb68331ec470b7aaf634c04/resources/Castanem/tokens/players/yvas_acid_icon.png`});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `XlSwFywAbYlzYyNq`, disabled:true});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `AiIClwGDuNBDwQ8W`, disabled:true});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `KmxQgUzJWPWUvqkA`, disabled:true});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `yRfFGHq6RNEmZZjN`, disabled:false});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `txqP5KlEkE6VyO9X`, disabled:true});\n                sendToChat(`Yvas dribbles acid from her maw.`);\n            }\n        },\n        poison: {\n            label: `Poison (Green)`,\n            callback: () => {\n                act.update({\"img\": `https://assets.forge-vtt.com/5fb68331ec470b7aaf634c04/resources/Castanem/tokens/players/yvas_poison_icon.png`});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `XlSwFywAbYlzYyNq`, disabled:true});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `AiIClwGDuNBDwQ8W`, disabled:true});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `KmxQgUzJWPWUvqkA`, disabled:true});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `yRfFGHq6RNEmZZjN`, disabled:true});\n                act.updateEmbeddedEntity(\"ActiveEffect\", {_id: `txqP5KlEkE6VyO9X`, disabled:false});\n                sendToChat(`Yvas leaks toxic fumes.`);\n            }\n        }\n    },\n    default: \"cold\",\n    close: () => {}\n}, {width: 700});\n\ndialogEditor.render(true);\n\nfunction sendToChat(msg) {\n    if (!game.user.isGM) {\n        ChatMessage.create({speaker: {alias: `Yvas Colour Swap`}, content : msg});\n    }\n    ui.notifications.notify(msg);\n}","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false}},"ownership":{"default":0,"B9gnYBRjYSZZpO02":3},"_stats":{"systemId":null,"systemVersion":null,"coreVersion":null,"createdTime":null,"modifiedTime":null,"lastModifiedBy":null}}
{"_id":"AteWk1xV5VxDF4C8","name":"Bane","type":"script","author":"B9gnYBRjYSZZpO02","img":"icons/svg/degen.svg","scope":"global","command":"// new build for Bane macro by Penguin#0949 with help from Kotetsushin#7680\n// version beta 4.2.0\n\n// user notes\n// this macro is inteded for use by the recipient of the Bane spell in D&D 5e on Forge VTT\n// N.B. every recipient will need to use this macro independantly on their own Actor/token.\n\n//user modifiable declarations CHANGE AT YOUR OWN RISK\nconst baneIconPath = 'icons/svg/degen.svg';\nlet baneMsg = ' is Baned!';\nlet endbaneMsg = ' is no longer Baned.';\n\n//fixed declarations DO NOT MODIFY\nlet macroActor = token.actor;\nlet chatMsg = '';\nlet Baned = macroActor.effects.find(i => i.data.label === \"Baned\")\nlet bane = {\n    changes: [\n        {\n            key: \"data.bonuses.mwak.attack\",\n            mode: 2,\n            priority: 20,\n            value: \"-1d4\",\n        },\n        {\n            key: \"data.bonuses.rwak.attack\",\n            mode: 2,\n            priority: 20,\n            value: \"-1d4\",\n        },\n\t\t{\n            key: \"data.bonuses.msak.attack\",\n            mode: 2,\n            priority: 20,\n            value: \"-1d4\",\n        },\n\t\t{\n            key: \"mdata.bonuses.rsak.attack\",\n            mode: 2,\n            priority: 20,\n            value: \"-1d4\",\n        },\n\t\t{\n            key: \"data.bonuses.abilities.save\",\n            mode: 2,\n            priority: 20,\n            value: \"-1d4\",\n        },\n    ],\n    duration: {\n        \"seconds\": 6,\n    },\n    icon: baneIconPath,\n    label: \"Baned\"\n}\n//identify token\nif (macroActor === undefined || macroActor === null) {\n  ui.notifications.warn(\"Please select a token first.\");\n} \nelse {\n// If already bless\t\nif (Baned) {\n    macroActor.deleteEmbeddedEntity(\"ActiveEffect\", Baned.id)\n// anounce to chat\n\tchatMsg = `${macroActor.name} ${endbaneMsg}`;\n}\n// if not already bless\t\nelse {\n    macroActor.createEmbeddedEntity(\"ActiveEffect\", bane)\t\n// anounce to chat\n\t\tchatMsg = `${macroActor.name} ${baneMsg}`;\n}\n// write to chat if needed:\nif (chatMsg !== '') {\n\tlet chatData = {\n\t\tuser: game.user._id,\n\t\tspeaker: ChatMessage.getSpeaker(),\n\t\tcontent: chatMsg\n\t};\n\tChatMessage.create(chatData, {});\n}\n}","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false}},"ownership":{"default":0,"B9gnYBRjYSZZpO02":3},"_stats":{"systemId":null,"systemVersion":null,"coreVersion":null,"createdTime":null,"modifiedTime":null,"lastModifiedBy":null}}
{"_id":"E7T2In8tq7DUJq6H","name":"Token Sight Adjuster","type":"script","author":"HETKO3yU7ZGsMIw8","img":"icons/svg/blind.svg","scope":"global","command":"// This macro adjusts the selected token's sight values\n// based on the selection, and displays a chat message when\n// a token is adjusted.\n\n// To Use:\n// Select a single token\n// Click macro\n// Choose desired sight option\n\n\nlet allTokens = canvas.tokens.controlled;\nif(allTokens.length != 1){\n  ui.notifications.error(\"Select a single token.\");\n} else {\nlet dialogEditor = new Dialog({\n  title: `Darkvision Adjuster`,\n  content: `Select a sight mode for ${actor.name}.`,\n  buttons: {\n    none: {\n      label: `No Sight`,\n      callback: () => {\n        token.document.update({\"dimSight\": 0, \"brightSight\": 0});\n        sendToChat(`${actor.name} can't see anything. (No sight)`);\n      }\n    },\n    min: {\n      label: `Minimal`,\n      callback: () => {\n        token.document.update({\"dimSight\": 5, \"brightSight\": 0});\n        sendToChat(`${actor.name} can't see anything. (Minimal sight)`);\n      }\n    },\n    dark30: {\n      label: `30' Darkvision`,\n      callback: () => {\n        token.document.update({\"dimSight\": 30, \"brightSight\": 0});\n        sendToChat(`${actor.name} has 30ft darkvision.`);\n      }\n    },\n    dark60: {\n      label: `60' Darkvision`,\n      callback: () => {\n        token.document.update({\"dimSight\": 60, \"brightSight\": 0});\n        sendToChat(`${actor.name} has 60ft darkvision.`);\n      }\n    },\n    dark90: {\n      label: `90' Darkvision`,\n      callback: () => {\n        token.document.update({\"dimSight\": 90, \"brightSight\": 0});\n        sendToChat(`${actor.name} has 90ft darkvision.`);\n      }\n    },\n    dark120: {\n      label: `120' Darkvision`,\n      callback: () => {\n        token.document.update({\"dimSight\": 120, \"brightSight\": 0});\n        sendToChat(`${actor.name} has 120ft darkvision.`);\n      }\n    }\n  },\n  default: \"close\",\n  close: () => {}\n});\n\ndialogEditor.render(true);\n}\n\nfunction sendToChat(msg){\n    if(!game.user.isGM){\n        ChatMessage.create({speaker: {alias: `Crash's Token Sight Adjuster`}, content : msg});\n    }\n    ui.notifications.notify(msg);\n}","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""}},"ownership":{"default":0,"HETKO3yU7ZGsMIw8":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.1.4","coreVersion":"10.291","createdTime":null,"modifiedTime":1676226287366,"lastModifiedBy":"HETKO3yU7ZGsMIw8"}}
{"_id":"J6ynb8SbhT6B6aLf","name":"Play Sound: Page Turn","type":"script","author":"B9gnYBRjYSZZpO02","img":"icons/svg/dice-target.svg","scope":"global","command":"AudioHelper.play({src: \"resources/Castanem/soundtrack/soundfx/turning-page.wav\", volume: 0.8, autoplay: true, loop: false}, false);","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false}},"ownership":{"default":0,"B9gnYBRjYSZZpO02":3},"_stats":{"systemId":null,"systemVersion":null,"coreVersion":null,"createdTime":null,"modifiedTime":null,"lastModifiedBy":null}}
{"type":"script","name":"Particle Effect: Fog","command":"Hooks.call('fxmaster.updateParticleEffects', [{\"type\":\"fog\",\"options\":{\"scale\":1,\"speed\":1,\"lifetime\":1,\"density\":0.12,\"tint\":{\"apply\":true,\"value\":\"#bfbfbf\"}}}]);","img":"modules/fxmaster/assets/particle-effects/icons/fog.png","author":"B9gnYBRjYSZZpO02","scope":"global","folder":null,"sort":0,"ownership":{"default":0,"B9gnYBRjYSZZpO02":3},"flags":{},"_stats":{"systemId":"dnd5e","systemVersion":"2.1.4","coreVersion":"10.291","createdTime":1677969953692,"modifiedTime":1677969953692,"lastModifiedBy":"B9gnYBRjYSZZpO02"},"_id":"MGgtl7D1imNoYBGh"}
{"_id":"PVaB5GVcRu8fn9wX","name":"Bless","type":"script","author":"B9gnYBRjYSZZpO02","img":"icons/svg/regen.svg","scope":"global","command":"// new build for bless macro by Penguin#0949 with help from Kotetsushin#7680\n// version beta 4.2.0\n\n// user notes\n// this macro is inteded for use by the recipient of the bless spell in D&D 5e on Forge VTT\n// N.B. every recipient will need to use this macro independantly on their own Actor/token.\n\n//user modifiable declarations CHANGE AT YOUR OWN RISK\nconst blessIconPath = 'icons/svg/regen.svg';\nlet blessMsg = ' is Blessed!';\nlet endblessMsg = ' is no longer Blessed';\n\n//fixed declarations DO NOT MODIFY\nlet macroActor = token.actor;\nlet chatMsg = '';\nlet Blessd = macroActor.effects.find(i => i.data.label === \"Blessed\")\nlet bless = {\n    changes: [\n        {\n            key: \"data.bonuses.mwak.attack\",\n            mode: 2,\n            priority: 20,\n            value: \"+1d4\",\n        },\n        {\n            key: \"data.bonuses.rwak.attack\",\n            mode: 2,\n            priority: 20,\n            value: \"+1d4\",\n        },\n\t\t{\n            key: \"data.bonuses.msak.attack\",\n            mode: 2,\n            priority: 20,\n            value: \"+1d4\",\n        },\n\t\t{\n            key: \"data.bonuses.rsak.attack\",\n            mode: 2,\n            priority: 20,\n            value: \"+1d4\",\n        },\n\t\t{\n            key: \"data.bonuses.abilities.save\",\n            mode: 2,\n            priority: 20,\n            value: \"+1d4\",\n        },\n    ],\n    duration: {\n        \"seconds\": 6,\n    },\n    icon: blessIconPath,\n    label: \"Blessed\"\n}\n//identify token\nif (macroActor === undefined || macroActor === null) {\n  ui.notifications.warn(\"Please select a token first.\");\n} \nelse {\n// If already bless\t\nif (Blessd) {\n    macroActor.deleteEmbeddedEntity(\"ActiveEffect\", Blessd.id)\n// anounce to chat\n\tchatMsg = `${macroActor.name} ${endblessMsg}`;\n}\n// if not already bless\t\nelse {\n    macroActor.createEmbeddedEntity(\"ActiveEffect\", bless)\t\n// anounce to chat\n\t\tchatMsg = `${macroActor.name} ${blessMsg}`;\n}\n// write to chat if needed:\nif (chatMsg !== '') {\n\tlet chatData = {\n\t\tuser: game.user._id,\n\t\tspeaker: ChatMessage.getSpeaker(),\n\t\tcontent: chatMsg\n\t};\n\tChatMessage.create(chatData, {});\n}\n}","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false}},"ownership":{"default":0,"B9gnYBRjYSZZpO02":3},"_stats":{"systemId":null,"systemVersion":null,"coreVersion":null,"createdTime":null,"modifiedTime":null,"lastModifiedBy":null}}
{"_id":"PewfmnCv5jBvp8mD","name":"Amara Form Swap","type":"script","author":"HETKO3yU7ZGsMIw8","img":"icons/creatures/abilities/wolf-howl-moon-purple.webp","scope":"global","command":"const normalUrl = 'https://assets.forge-vtt.com/5f407d88f5aa0b623bedd707/ash/tokens/Amara%20Token%205.png';\nconst hybridUrl = 'https://assets.forge-vtt.com/5f407d88f5aa0b623bedd707/ash/tokens/Amara%20Hybrid%20Token%204.png';\nconst kindredUrl = 'https://assets.forge-vtt.com/5f407d88f5aa0b623bedd707/ash/tokens/AmaraKindredToken.png';\nconst hybridEffectId = 'oaepXZ1XnmTs8P5d';\nconst kindredEffectId = '23Wfy2LuNea0v3oD';\nconst shieldItemName = 'Shield +1';\n\nif(token.actor.name === \"Amara Drakos\"){\n\nnew Dialog({\n    title: `Swap Token Image`,\n    content: `Choose a new token image for ${token.actor.name}.`,\n    buttons: {\n      normal: {\n        label: `Normal`,\n        icon: '<i class=\"fas fa-user\"></i>',\n        callback: async () => { \n          // Update Effects\n          await token.actor.updateEmbeddedDocuments(\"ActiveEffect\", [{_id:hybridEffectId, disabled:true}, {_id:kindredEffectId, disabled:true}]);\n          // Updates prototype token\n          await game.actors.get(token.data.actor.id).update({\"img\": normalUrl, \"token.img\": normalUrl});\n          // Updates all tokens on all scenes\n          for(let scene of game.scenes) {\n            const amaraTokens = scene.tokens.filter(t => t.name === \"Amara\");\n            const updates = amaraTokens.map(t => ({_id: t.id, img: normalUrl, \"width\":1, \"height\": 1, \"scale\": 1}));\n            await scene.updateEmbeddedDocuments(\"Token\", updates);\n          }\n        }\n      },\n      hybrid: {\n        label: `Hybrid`,\n        icon: '<i class=\"fas fa-moon\"></i>',\n        callback: async () => {\n          // Update Effects\n          await token.actor.updateEmbeddedDocuments(\"ActiveEffect\", [{_id:hybridEffectId, disabled:false}, {_id:kindredEffectId, disabled:true}]);\n          // Updates prototype token\n          await game.actors.get(token.data.actor.id).update({\"img\": hybridUrl, \"token.img\": hybridUrl});\n          // Updates all tokens on all scenes          \n          for(let scene of game.scenes) {\n            const amaraTokens = scene.tokens.filter(t => t.name === \"Amara\");\n            const updates = amaraTokens.map(t => ({_id: t.id, img: hybridUrl, \"width\":1, \"height\": 1, \"scale\": 2}));\n            await scene.updateEmbeddedDocuments(\"Token\", updates);\n          }\n        }\n      },\n      kindred: {\n        label: `Kindred`,\n        icon: '<i class=\"fas fa-paw\"></i>',\n        callback: async () => { \n          // Update Effects\n          await token.actor.updateEmbeddedDocuments(\"ActiveEffect\", [{_id:hybridEffectId, disabled:true}, {_id:kindredEffectId, disabled:false}]);\n          // Updates prototype token\n          await game.actors.get(token.data.actor.id).update({\"img\": kindredUrl, \"token.img\": kindredUrl});\n          // Updates all tokens on all scenes\n          for(let scene of game.scenes) {\n            const amaraTokens = scene.tokens.filter(t => t.name === \"Amara\");\n            const updates = amaraTokens.map(t => ({_id: t.id, img: kindredUrl, \"width\":2, \"height\": 2, \"scale\": 1}));\n            await scene.updateEmbeddedDocuments(\"Token\", updates);\n          }\n        }\n      },\n    }\n  }).render(true);\n\n} else {\n  ui.notifications.error(\"Select Amara's token.\");\n}","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""}},"ownership":{"default":0,"HETKO3yU7ZGsMIw8":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.1.5","coreVersion":"10.291","createdTime":null,"modifiedTime":1686244990168,"lastModifiedBy":"HETKO3yU7ZGsMIw8"}}
{"name":"Toggle Invisible","type":"script","author":"B9gnYBRjYSZZpO02","img":"icons/svg/dice-target.svg","scope":"global","command":"//Toggles selected tokens invisible\nConditionalVisibility.toggleCondition(canvas.tokens.controlled, 'invisible', true)","folder":null,"sort":0,"flags":{"core":{"sourceId":"Compendium.conditional-visibility.Conditional Visibility.qeE9JiWntRzjeBBr"}},"_id":"PtBNZdeZfzuSRVRs","ownership":{"default":0,"B9gnYBRjYSZZpO02":3},"_stats":{"systemId":null,"systemVersion":null,"coreVersion":null,"createdTime":null,"modifiedTime":null,"lastModifiedBy":null}}
{"type":"script","name":"Particle Effect: Snow","command":"Hooks.call('fxmaster.updateParticleEffects', [{\"type\":\"snow\",\"options\":{\"scale\":1,\"direction\":65,\"speed\":1,\"lifetime\":1,\"density\":0.5,\"tint\":{\"apply\":false,\"value\":\"#ffffff\"}}}]);","img":"modules/fxmaster/assets/particle-effects/icons/snow.png","author":"B9gnYBRjYSZZpO02","scope":"global","folder":null,"sort":0,"ownership":{"default":0,"B9gnYBRjYSZZpO02":3},"flags":{},"_stats":{"systemId":"dnd5e","systemVersion":"2.1.4","coreVersion":"10.291","createdTime":1677970000659,"modifiedTime":1677970000659,"lastModifiedBy":"B9gnYBRjYSZZpO02"},"_id":"Q3eDBzpECpot0f1C"}
{"_id":"SYrXLG18pUpvdT4u","name":"Turn Off Weather","type":"script","author":"B9gnYBRjYSZZpO02","img":"icons/svg/cancel.svg","scope":"global","command":"Hooks.call('fxmaster.updateParticleEffects', []);","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false}},"ownership":{"default":0,"B9gnYBRjYSZZpO02":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.1.2","coreVersion":"10.291","createdTime":null,"modifiedTime":1674421143286,"lastModifiedBy":"B9gnYBRjYSZZpO02"}}
{"type":"script","name":"Particle Effects: Blizzard","command":"Hooks.call('fxmaster.updateParticleEffects', [{\"type\":\"snow\",\"options\":{\"scale\":1,\"direction\":65,\"speed\":1,\"lifetime\":1,\"density\":0.5,\"tint\":{\"apply\":false,\"value\":\"#ffffff\"}}},{\"type\":\"snowstorm\",\"options\":{\"scale\":1,\"direction\":90,\"speed\":1,\"lifetime\":1,\"density\":0.6,\"tint\":{\"apply\":false,\"value\":\"#ffffff\"}}}]);","img":"modules/fxmaster/assets/particle-effects/icons/snow.png","author":"B9gnYBRjYSZZpO02","scope":"global","folder":null,"sort":0,"ownership":{"default":0,"B9gnYBRjYSZZpO02":3},"flags":{"advanced-macros":{"runAsGM":false,"runForEveryone":false,"runForSpecificUser":""}},"_stats":{"systemId":"dnd5e","systemVersion":"2.1.4","coreVersion":"10.291","createdTime":1677970007607,"modifiedTime":1677970025441,"lastModifiedBy":"B9gnYBRjYSZZpO02"},"_id":"VLhDAjtdoG0AkKrz"}
{"type":"script","scope":"actor","name":"Bident of the Eclipse","img":"https://assets.forge-vtt.com/5fb68331ec470b7aaf634c04/resources/Castanem/images/item_art/bident_of_the_eclipse.jpg","command":"dnd5e.documents.macro.rollItem(\"Bident of the Eclipse\")","flags":{"dnd5e":{"itemMacro":true}},"author":"HETKO3yU7ZGsMIw8","folder":null,"sort":0,"ownership":{"default":0,"HETKO3yU7ZGsMIw8":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.1.4","coreVersion":"10.291","createdTime":1677974434021,"modifiedTime":1677974434021,"lastModifiedBy":"HETKO3yU7ZGsMIw8"},"_id":"hZjLt6UYmOe5XoQU"}
{"_id":"iXAFOxGT2lYyZm2L","name":"Token Size Adjuster","type":"script","author":"HETKO3yU7ZGsMIw8","img":"icons/svg/aura.svg","scope":"global","command":"// This macro changes the size of a single selected token.\n// To use it, select ONE token and run the macro.\n// Then select the desired token size.\n// Profit.\n\nlet allTokens = canvas.tokens.controlled;\nif(allTokens.length != 1){\n  ui.notifications.error(\"Select a single token.\");\n} else {\n\nnew Dialog({\n    title: `Embiggen! Or ensmallen!`,\n    content: `Choose a new size for ${token.actor.name}.`,\n    buttons: {\n      tiny: {\n        label: `Tiny`,\n        callback: () => { token.document.update({\"width\":1, \"height\": 1, \"scale\":0.25}); }\n      },\n      small: {\n        label: `Small`,\n        callback: () => { token.document.update({\"width\":1, \"height\": 1, \"scale\":0.5}); }\n      },\n      medium: {\n        label: `Medium`,\n        callback: () => { token.document.update({\"width\":1, \"height\": 1, \"scale\":1}); }\n      },\n      large: {\n        label: `Large`,\n        callback: () => { token.document.update({\"width\":2, \"height\": 2, \"scale\":1}); }\n      },\n      huge: {\n        label: `Huge`,\n        callback: () => { token.document.update({\"width\":3, \"height\": 3, \"scale\":1}); }\n      },\n      gargantuan: {\n        label: `Gargantuan`,\n        callback: () => { token.document.update({\"width\":4, \"height\": 4, \"scale\":1}); }\n      }\n    }\n  }, {width: 700}).render(true);\n}","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""}},"ownership":{"default":2,"HETKO3yU7ZGsMIw8":3},"_stats":{"systemId":null,"systemVersion":null,"coreVersion":null,"createdTime":null,"modifiedTime":null,"lastModifiedBy":null}}
{"name":"Particle Effects: Off","type":"script","author":"B9gnYBRjYSZZpO02","img":"icons/svg/cancel.svg","scope":"global","command":"Hooks.call('fxmaster.updateParticleEffects', []);","folder":null,"sort":0,"ownership":{"default":0,"B9gnYBRjYSZZpO02":3},"flags":{"advanced-macros":{"runAsGM":false,"runForEveryone":false,"runForSpecificUser":""}},"_stats":{"systemId":"dnd5e","systemVersion":"2.1.4","coreVersion":"10.291","createdTime":1677970141362,"modifiedTime":1677970149233,"lastModifiedBy":"B9gnYBRjYSZZpO02"},"_id":"kGpDb7QR3LeviMlp"}
{"_id":"maA0Qcr2wqg7sEGG","name":"Stealth Check","type":"script","author":"B9gnYBRjYSZZpO02","img":"icons/svg/mystery-man.svg","scope":"global","command":"// Grabs selected tokens and rolls a stealth check against all other tokens passive perception on the map. Then returns the result.\n\n// getting all actors of selected tokens\nlet actors = canvas.tokens.controlled.map(({ actor }) => actor);\n\n// if there are no selected tokens, roll for the player's character.\nif (actors.length < 1) {\n  actors = game.users.entities.map(entity => {\n    if (entity.active && entity.character !== null) {\n      return entity.character;\n    }\n  });\n}\nconst validActors = actors.filter(actor => actor != null);\n\nlet messageContent = 'pp = passive perception<br>';\n\n// roll for every actor\nfor (const selectedActor of validActors) {\n  const stealthMod = selectedActor.data.data.skills.ste.total; // stealth roll\n  const stealth = new Roll(`1d20+${stealthMod}`).roll().total; // rolling the formula\n  messageContent += `<hr><h3>${selectedActor.name} stealth roll was a <b>${stealth}</b>.</h3>`; // creating the output string\n\n  // grab a list of unique tokens then check their passive perception against the rolled stealth.\n  const uniqueActor = {};\n  const caughtBy = canvas.tokens.placeables\n    .filter(token => !!token.actor)\n    .filter(({ actor }) => { // filter out duplicate token names. ie: we assume all goblins have the same passive perception\n      if (uniqueActor[actor.name]) {\n        return false;\n      }\n      uniqueActor[actor.name] = true;\n      return true;\n    })\n    .filter(({ actor }) => {\n      return selectedActor.id !== actor.id; // Don't check to see if the token sees himself.\n    })\n    .filter(({ actor }) => actor.data.data.skills.prc.passive >= stealth); // check map tokens passives with roller stealth\n\n  if (!caughtBy.length) {\n    messageContent += 'Stealth successful!<br>';\n  } else {\n    messageContent += 'Stealth questionable:<br>';\n    caughtBy.map(({ actor }) => {\n      messageContent += `<b>${actor.name}</b> pp(${actor.data.data.skills.prc.passive}).<br>`;\n    });\n  }\n}\n\n// create the message\nconst chatData = {\n  user: game.user._id,\n  speaker: game.user,\n  content: messageContent,\n  whisper: game.users.entities.filter((u) => u.isGM).map((u) => u._id),\n};\nChatMessage.create(chatData, {});","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false}},"ownership":{"default":0,"B9gnYBRjYSZZpO02":3},"_stats":{"systemId":null,"systemVersion":null,"coreVersion":null,"createdTime":null,"modifiedTime":null,"lastModifiedBy":null}}
{"_id":"meLpySX7EmoWqCqD","name":"Token Light Adjuster","type":"script","author":"HETKO3yU7ZGsMIw8","img":"icons/svg/light.svg","scope":"global","command":"// This macro adjusts the selected token's light values\n// based on the selection, and displays a chat message when\n// a token is adjusted.\n\n// To Use:\n// Select a single token\n// Click macro\n// Choose desired light option\n\nlet allTokens = canvas.tokens.controlled;\nif(allTokens.length != 1){\n  ui.notifications.error(\"Select a single token.\");\n} else {\n\nlet dialogEditor = new Dialog({\n  title: `And Crash said, Let there be light`,\n  content: `Choose a light source to apply to ${actor.name}.`,\n  buttons: {\n    none: {\n      label: `No Light`,\n      callback: () => {\n        token.document.update({\"dimLight\": 0, \"brightLight\": 0, \"lightAngle\": 360,});\n        sendToChat(`Light removed from ${actor.name}.`);\n      }\n    },\n    katya: {\n      label: `Katya's Small Rocks`,\n      callback: () => {\n        token.document.update({\"dimLight\": 10, \"brightLight\": 5, \"lightAngle\": 360,});\n        sendToChat(`${actor.name} has one of Katya's shiny rocks.`);\n      }\n    },torch: {\n      label: `Torch`,\n      callback: () => {\n        token.document.update({\"dimLight\": 40, \"brightLight\": 20, \"lightAngle\": 360,});\n        sendToChat(`${actor.name} lit a torch.`);\n      }\n    },lightbringer: {\n      label: `Lightbinger`,\n      callback: () => {\n        token.document.update({\"dimLight\": 60, \"brightLight\": 30, \"lightAngle\": 360,});\n        sendToChat(`Lightbringer begins to glow.`);\n      }\n    },\n    cantrip: {\n      label: `Light Cantrip`,\n      callback: () => {\n        token.document.update({\"dimLight\": 40, \"brightLight\": 20, \"lightAngle\": 360,});\n        sendToChat(`Light was cast on ${actor.name}.`);\n      }\n    },\n    lamp: {\n      label: `Lamp`,\n      callback: () => {\n        token.document.update({\"dimLight\": 45, \"brightLight\": 15, \"lightAngle\": 360,});\n        sendToChat(`${actor.name} lit a lamp.`);\n      }\n    },\n    bullseye: {\n      label: `Bullseye Lantern`,\n      callback: () => {\n        token.document.update({\"dimLight\": 120, \"brightLight\": 60, \"lightAngle\": 45,});\n        sendToChat(`${actor.name} lit a bullseye lantern.`);\n      }\n    },\n    hoodedOpen: {\n      label: `Hooded Lantern (Open)`,\n      callback: () => {\n        token.document.update({\"dimLight\": 60, \"brightLight\": 30, \"lightAngle\": 360,});\n        sendToChat(`${actor.name} opened a hooded lantern.`);\n      }\n    },\n    hoodedClosed: {\n      label: `Hooded Lantern (Closed)`,\n      callback: () => {\n        token.document.update({\"dimLight\": 5, \"brightLight\": 0, \"lightAngle\": 360,});\n        sendToChat(`${actor.name} closed a hooded lantern.`);\n      }\n    }\n  },\n  default: \"close\",\n  close: () => {}\n}, {width: 700});\n\ndialogEditor.render(true);\n}\n\nfunction sendToChat(msg){\n    if(!game.user.isGM){\n        ChatMessage.create({speaker: {alias: `Crash's Token Light Adjuster`}, content : msg});\n    }\n    ui.notifications.notify(msg);\n}","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""}},"ownership":{"default":3,"HETKO3yU7ZGsMIw8":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.1.4","coreVersion":"10.291","createdTime":null,"modifiedTime":1676226169397,"lastModifiedBy":"HETKO3yU7ZGsMIw8"}}
{"_id":"ncWO5mtmMpYITkX3","name":"Check Passive Insight","type":"script","author":"B9gnYBRjYSZZpO02","img":"icons/svg/silenced.svg","scope":"global","command":"// Pull the passive insight of each token in the current scene and whisper the results to the GM.\n// Only tested with the 5e System in Foundry.\n// Author: @Drunemeton#7955. Based on the original macro by author @Erogroth#7134.\n\n// Initalize variables.\nlet pcArray = [];\nlet npcArray = [];\nlet messageContentPC = \"\";\nlet messageContentNPC = \"\";\nlet messageHeaderPC = \"<b>PC Passive Insight </b><br>\";\nlet messageHeaderNPC = \"<b>NPC Passive Insight </b><br>\";\n\n// Gather tokens in the current scene into an array.\nlet tokens = canvas.tokens.placeables.filter((token) => token.data && token.actor);\n\n// From the tokens array sort into PC and NPC arrays.\nfor (let count of tokens) {\n  let tokenType = count.actor.data.type;\n  let tokenName = count.data.name;\n  let tokenPassive = count.actor.data.data.skills.ins.passive;\n  \n  if(tokenType === \"character\") {\n    pcArray.push({ name: tokenName, passive: tokenPassive });\n  } \n  if(tokenType === \"npc\") {\n    npcArray.push({ name: tokenName, passive: tokenPassive });\n  }\n}\n\n// Sort each array.\nsortArray(pcArray);\nsortArray(npcArray);\n\n// Build chat message, with PCs first, then NPCs.\nfor (let numPC of pcArray) {\n  messageContentPC += `${numPC.name}: <b>${numPC.passive}</b><br>`;\n}\nfor (let numNPC of npcArray) {\n  messageContentNPC += `${numNPC.name}: <b>${numNPC.passive}</b><br>`;\n}\n\nlet chatMessage = (messageHeaderPC + messageContentPC + `<br>` + messageHeaderNPC + messageContentNPC);\n\nlet chatData = {\n  user: game.user._id,\n  speaker: ChatMessage.getSpeaker(),\n  content: chatMessage,\n  whisper: game.users.filter((u) => u.isGM).map((u) => u._id),\n};\n\n// Display chat message.\nChatMessage.create(chatData, {});\n\n// Sort each array by Name.\n  function sortArray(checkArray) {\n    checkArray.sort(function (a, b) {\n      var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n      var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n      // names must be equal\n      return 0;\n    });\n\n    // Sort array by Passive Insight.\n    checkArray.sort(function (a, b) {\n      return b.passive - a.passive;\n    });\n  }","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":true}},"ownership":{"default":0,"B9gnYBRjYSZZpO02":3},"_stats":{"systemId":null,"systemVersion":null,"coreVersion":null,"createdTime":null,"modifiedTime":null,"lastModifiedBy":null}}
{"type":"script","name":"Particle Effect: Rain Without Splash","command":"Hooks.call('fxmaster.updateParticleEffects', [{\"type\":\"rainsimple\",\"options\":{\"scale\":1,\"direction\":75,\"speed\":1,\"lifetime\":1,\"density\":0.5,\"tint\":{\"apply\":false,\"value\":\"#ffffff\"}}}]);","img":"modules/fxmaster/assets/particle-effects/icons/rain.png","author":"B9gnYBRjYSZZpO02","scope":"global","folder":null,"sort":0,"ownership":{"default":0,"B9gnYBRjYSZZpO02":3},"flags":{},"_stats":{"systemId":"dnd5e","systemVersion":"2.1.4","coreVersion":"10.291","createdTime":1677969970935,"modifiedTime":1677969970935,"lastModifiedBy":"B9gnYBRjYSZZpO02"},"_id":"qlYmr0UpPpvXeu4B"}
{"type":"script","name":"Particle Effect: Stars","command":"Hooks.call('fxmaster.updateParticleEffects', [{\"type\":\"stars\",\"options\":{\"scale\":1,\"speed\":1,\"lifetime\":1,\"density\":0.5,\"tint\":{\"apply\":false,\"value\":\"#bee8ee\"}}}]);","img":"modules/fxmaster/assets/particle-effects/icons/stars.png","author":"B9gnYBRjYSZZpO02","scope":"global","folder":null,"sort":0,"ownership":{"default":0,"B9gnYBRjYSZZpO02":3},"flags":{},"_stats":{"systemId":"dnd5e","systemVersion":"2.1.4","coreVersion":"10.291","createdTime":1677970058380,"modifiedTime":1677970058380,"lastModifiedBy":"B9gnYBRjYSZZpO02"},"_id":"rPBaFrGakEApGLoa"}
{"_id":"PewfmnCv5jBvp8mD","name":"Amara Form Swap","type":"script","author":"HETKO3yU7ZGsMIw8","img":"icons/creatures/abilities/wolf-howl-moon-purple.webp","scope":"global","command":"const normalUrl = 'https://assets.forge-vtt.com/5f407d88f5aa0b623bedd707/ash/tokens/Amara%20Token%206.png';\nconst hybridUrl = 'https://assets.forge-vtt.com/5f407d88f5aa0b623bedd707/ash/tokens/Amara%20Hybrid%20Token%204.png';\nconst kindredUrl = 'https://assets.forge-vtt.com/5f407d88f5aa0b623bedd707/ash/tokens/AmaraKindredToken.png';\nconst hybridEffectId = 'oaepXZ1XnmTs8P5d';\nconst kindredEffectId = '23Wfy2LuNea0v3oD';\nconst shieldItemName = 'Shield +1';\n\nif(token.actor.name === \"Amara Drakos\"){\n\nnew Dialog({\n    title: `Swap Token Image`,\n    content: `Choose a new token image for ${token.actor.name}.`,\n    buttons: {\n      normal: {\n        label: `Normal`,\n        icon: '<i class=\"fas fa-user\"></i>',\n        callback: async () => { \n          // Update Effects\n          await token.actor.updateEmbeddedDocuments(\"ActiveEffect\", [{_id:hybridEffectId, disabled:true}, {_id:kindredEffectId, disabled:true}]);\n          // Updates prototype token\n          await game.actors.get(token.data.actor.id).update({\"img\": normalUrl, \"token.img\": normalUrl});\n          // Updates all tokens on all scenes\n          for(let scene of game.scenes) {\n            const amaraTokens = scene.tokens.filter(t => t.name === \"Amara\");\n            const updates = amaraTokens.map(t => ({_id: t.id, img: normalUrl, \"width\":1, \"height\": 1, \"scale\": 1}));\n            await scene.updateEmbeddedDocuments(\"Token\", updates);\n          }\n        }\n      },\n      hybrid: {\n        label: `Hybrid`,\n        icon: '<i class=\"fas fa-moon\"></i>',\n        callback: async () => {\n          // Update Effects\n          await token.actor.updateEmbeddedDocuments(\"ActiveEffect\", [{_id:hybridEffectId, disabled:false}, {_id:kindredEffectId, disabled:true}]);\n          // Updates prototype token\n          await game.actors.get(token.data.actor.id).update({\"img\": hybridUrl, \"token.img\": hybridUrl});\n          // Updates all tokens on all scenes          \n          for(let scene of game.scenes) {\n            const amaraTokens = scene.tokens.filter(t => t.name === \"Amara\");\n            const updates = amaraTokens.map(t => ({_id: t.id, img: hybridUrl, \"width\":1, \"height\": 1, \"scale\": 2}));\n            await scene.updateEmbeddedDocuments(\"Token\", updates);\n          }\n        }\n      },\n      kindred: {\n        label: `Kindred`,\n        icon: '<i class=\"fas fa-paw\"></i>',\n        callback: async () => { \n          // Update Effects\n          await token.actor.updateEmbeddedDocuments(\"ActiveEffect\", [{_id:hybridEffectId, disabled:true}, {_id:kindredEffectId, disabled:false}]);\n          // Updates prototype token\n          await game.actors.get(token.data.actor.id).update({\"img\": kindredUrl, \"token.img\": kindredUrl});\n          // Updates all tokens on all scenes\n          for(let scene of game.scenes) {\n            const amaraTokens = scene.tokens.filter(t => t.name === \"Amara\");\n            const updates = amaraTokens.map(t => ({_id: t.id, img: kindredUrl, \"width\":2, \"height\": 2, \"scale\": 1}));\n            await scene.updateEmbeddedDocuments(\"Token\", updates);\n          }\n        }\n      },\n    }\n  }).render(true);\n\n} else {\n  ui.notifications.error(\"Select Amara's token.\");\n}","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""}},"ownership":{"default":0,"HETKO3yU7ZGsMIw8":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.2.1","coreVersion":"10.291","createdTime":null,"modifiedTime":1687581345593,"lastModifiedBy":"HETKO3yU7ZGsMIw8"}}
